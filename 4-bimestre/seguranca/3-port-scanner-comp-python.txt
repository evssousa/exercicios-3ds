Abrir o terminal para iniciar a criar um port scannear, ou seja, construir o nosso proprio nmap.

Noso port scanner vai funcionar como o teste com netcat (nc bancocn.com 80). Quando testamos o netcat, o comando fica tentando uma conexao, mas chega um momento que ele encerra o timeout. O port scanner vai ser tipo isso.

Iremos usar o nano: nano portscan.py. O codigo sera:

# importando as ligacoes de rede e o sistema operacional
import socket

# criacao do cliente pedindo conexao ip e protocolo tcp
cliente = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# fazendo a conexao
cliente.connect(('bancocn.com', 80))

# enviar informacao, como no netcat
cliente.send('asdf \n\n')

# quantidade de bytes no recebimento da respota
resposta = cliente.recv(1024)

# mostrar na tela
print resposta

para salvar ctrl x.

Para executar, no terminal digite: python portscan.py

Depois de testar o codigo, ir em editar o codigo para mudar algumas configuracoes, ja que nao se tem a necessidade de ta enviando informacoes.

import socket

portas = [21, 23, 80, 8080, 443]

for porta in portas:
    cliente = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    cliente.settimeout(0.1) # colocando um tempo de espera
    codigo = cliente.connect_ex(('bancocn.com', porta)) # retorna 0 se a porta deu certo
    if codigo == 0:
        print porta, "OPEN"

motivo de criar o nosso proprio nmap, e que caso eu precise fazer um scan em um servidor, provavelmente nao se dara permissao para instalar o nmap, entao devemos criar um.